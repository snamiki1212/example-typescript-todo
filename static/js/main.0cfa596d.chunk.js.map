{"version":3,"sources":["containers/List.tsx","actions/index.ts","containers/AddButton.tsx","components/Input.tsx","containers/InputName.tsx","containers/InputCount.tsx","App.tsx","serviceWorker.ts","reducers/memo.ts","reducers/index.ts","reducers/input.ts","index.tsx"],"names":["connect","state","list","memoList","dispatch","handleClick","memoId","type","id","_ref","_ref$list","react_default","a","createElement","map","memo","style","textDecoration","finished","key","onClick","name","count","inputName","inputCount","ownProps","event","Input","handleChange","value","onChange","target","App","className","InputName","InputCount","containers_AddButton","containers_List","Boolean","window","location","hostname","match","initial","combineReducers","arguments","length","undefined","action","newMemo","Math","round","random","concat","Object","toConsumableArray","store","createStore","rootReducer","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0cfa596d.chunk.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { toggleMemo } from '../actions';\n\nexport const List = ({ list = [], handleClick }: any) => { // TODO\n  return(\n    <ul>\n      {list.map((memo: any) => // TODO\n        <li\n          style={{ textDecoration: memo.finished ? 'line-through' : 'none'}}\n          key={memo.id}\n          onClick={() => handleClick(memo.id)}\n        >\n          <span>{memo.name}</span>\n          {\" | \"}\n          <span>{memo.count}</span>\n        </li>\n      )}\n    </ul>\n  )\n}\n\nconst mapStateToProps = (state: any) => ({\n  list: state.memoList\n})\n\nconst mapDispatchToProps = (dispatch: any) => ({\n  handleClick: (memoId: number) => dispatch(toggleMemo(memoId))\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(List);\n","export const addMemo = (name: string, count: number) => ({\n  type: 'ADD_MEMO',\n  name,\n  count\n})\n\nexport const inputName = (name: string) => ({\n  type: 'INPUT_NAME',\n  name\n})\n\nexport const inputCount = (count: number) => ({\n  type: 'INPUT_COUNT',\n  count\n})\n\nexport const toggleMemo = (id: number) => ({\n  type: 'TOGGLE_MEMO',\n  id\n})\n\nexport const clearInput = () => ({\n  type: 'CLEAR_INPUT'\n})\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { addMemo, clearInput } from '../actions';\n\nconst AddButton = ({ handleClick, inputName, inputCount }: any) => {\n  return(\n    <div>\n      <button onClick={(event) => handleClick(inputName, inputCount)}>ADD</button>\n    </div>\n  )\n}\n\nconst mapStateToProps = (state: any) => ({\n  inputName: state.inputName,\n  inputCount: state.inputCount,\n})\n\nconst mapDispatchToProps = (dispatch: any, ownProps: any) => ({\n  handleClick: (inputName: string, inputCount: number) => {\n    dispatch( addMemo(inputName, inputCount) );\n    dispatch( clearInput() );\n  },\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(AddButton);\n","import React from 'react';\n\nconst Input = ({ handleChange, value, type}: any) => {\n  return(\n    <input\n      type={type}\n      value={value}\n      onChange={(event) => handleChange(event.target.value)}\n    />\n  )\n}\n\nexport default Input;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { inputName } from '../actions';\nimport Input from '../components/Input';\n\nconst mapStateToProps = (state: any) => ({\n  value: state.inputName,\n  type: 'text',\n})\n\nconst mapDispatchToProps = (dispatch: any) => ({\n  handleChange: (name: string) => dispatch(inputName(name)),\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(Input);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { inputCount } from '../actions';\nimport Input from '../components/Input';\n\nconst mapStateToProps = (state: any) => ({\n  value: state.inputCount,\n  type: 'number',\n})\n\nconst mapDispatchToProps = (dispatch: any) => ({\n  handleChange: (count: number) => dispatch(inputCount(count)),\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(Input);\n","import React from 'react';\nimport './App.css';\nimport List from './containers/List';\nimport AddButton from './containers/AddButton';\nimport InputName from './containers/InputName';\nimport InputCount from './containers/InputCount';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <InputName />\n      <InputCount />\n      <AddButton />\n      <p>MILK MEMO</p>\n      <List />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initial = [\n  {id: 1, name: 'milk', count: 1, finished: false},\n  {id: 2, name: 'coffe', count: 2, finished: true}\n];\n\nexport const memoList = (state = initial, action: any) => {\n  switch(action.type){\n    case 'ADD_MEMO': {\n      const newMemo: object = {\n        id: Math.round(Math.random()*1000),\n        name: action.name,\n        count: action.count,\n        finished: false,\n      };\n\n      return [...state, newMemo];\n    }\n\n    case 'TOGGLE_MEMO':\n      return state.map(memo => {\n        memo.finished =\n          memo.id === action.id\n            ? !memo.finished\n            : memo.finished\n\n        return memo;\n      });\n\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from \"redux\";\nimport { memoList } from './memo';\nimport { inputName, inputCount } from './input';\n\nexport default combineReducers(\n  { memoList , inputName, inputCount} as any\n);\n","export const inputName = (state = '', action: any) => {\n  switch(action.type){\n    case 'INPUT_NAME':\n      return action.name;\n    case 'CLEAR_INPUT':\n      return '';\n    default:\n      return state;\n  }\n}\n\nexport const inputCount = (state = '', action: any) => {\n  switch(action.type){\n    case 'INPUT_COUNT':\n      return action.count;\n    case 'CLEAR_INPUT':\n      return '';\n    default:\n      return state;\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport rootReducer from './reducers/index';\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n  , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}